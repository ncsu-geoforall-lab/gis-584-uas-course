{
  "hash": "2d3c52379716b07b08feedb7f7a8138a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\nTopic: \"Topic 2: Structure from Motion\"\ntitle: \"B. Imagery processing and structure from motion (SfM)\"\nsubtitle: \"Topic 2: Structure from Motion\"\ndate: 8/28/2024\n\"Assignment Due Date\": 9/30/2024\n---\n\n# From images to 3D models: Photogrammetry and Structure from Motion concepts\n\n## Outline:\n\n* aerial imagery distortions\n* orthorectification process\n* interior and exterior orientation\n* Bundle Block Adjustment\n* Ground control points (GCP)\n* Image mosaic and point cloud results\n* Structure from motion (SfM)\n\n## Lecture\n\n* Lecture Slides: [Photogrammetry and SfM](lectures/lecture_2b.qmd)\n\n##  Supplemental materials\n\n* Y. Furukawa and C. Hernández . [Multi-View Stereo: A Tutorial](http://carlos-hernandez.org/papers/fnt_mvs_2015.pdf). Foundations and TrendsR in Computer Graphics and Vision, vol. 9, no. 1-2, pp. 1–148, 2013.\n\n\n## Assignment\n<!-- TODO: Update Links -->\n* [Intro to the assignment (slides)](https://ncsu-geoforall-lab.github.io/uav-lidar-analytics-course/lectures/2017_Imagery_Processing_assignment_intro.html#/)\n* [Geoprocessing UAS imagery in Agisoft Metashape](https://ncsu-geoforall-lab.github.io/uav-lidar-analytics-course/assignments/geoprocessing.html)\n\n## Homework\n\nPrepare report on generating orthomosaic and Digital Surface Model using images taken by the UAS Trimble UX5 Rover and performing the processing in Agisoft Metashape. Explain the report generated by Agisoft including the data accuracy.\n\n## Structure from Motion\n\nThis is a simple WebGL visualization to demonstrate the principles of Structure from Motion (SfM). The visualization shows how different camera angles and movements can be used to reconstruct the depth and structure of an object.\n\n\n```{javascript}\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Structure from Motion Visualization</title>\n    <style>\n        body { margin: 0; overflow: hidden; }\n        canvas { display: block; }\n    </style>\n</head>\n<body>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js\"></script>\n    <script>\n        // Set up the scene, camera, and renderer\n        const scene = new THREE.Scene();\n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer();\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        document.body.appendChild(renderer.domElement);\n\n        // Create a 3D object - a simple cube\n        const geometry = new THREE.BoxGeometry(1, 1, 1);\n        const material = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });\n        const cube = new THREE.Mesh(geometry, material);\n        scene.add(cube);\n\n        // Create camera points\n        const cameraGeometry = new THREE.SphereGeometry(0.1, 32, 32);\n        const cameraMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\n        const cameraPoint1 = new THREE.Mesh(cameraGeometry, cameraMaterial);\n        const cameraPoint2 = new THREE.Mesh(cameraGeometry, cameraMaterial);\n\n        scene.add(cameraPoint1);\n        scene.add(cameraPoint2);\n\n        camera.position.z = 5;\n\n        // Function to update the camera points and simulate motion\n        function updateCameraPositions(t) {\n            const radius = 3;\n            const angle1 = t * 0.5;\n            const angle2 = t * 0.7;\n\n            cameraPoint1.position.x = radius * Math.cos(angle1);\n            cameraPoint1.position.y = radius * Math.sin(angle1);\n            cameraPoint1.position.z = 2 * Math.sin(angle1 * 0.5);\n\n            cameraPoint2.position.x = radius * Math.cos(angle2);\n            cameraPoint2.position.y = radius * Math.sin(angle2);\n            cameraPoint2.position.z = 2 * Math.sin(angle2 * 0.5);\n\n            cube.rotation.x += 0.01;\n            cube.rotation.y += 0.01;\n        }\n\n        // Animation loop\n        function animate(t) {\n            requestAnimationFrame(animate);\n\n            updateCameraPositions(t * 0.001);\n\n            renderer.render(scene, camera);\n        }\n\n        animate();\n    </script>\n</body>\n</html>\n```\n\n",
    "supporting": [
      "part_b_img_processing_sfm_files"
    ],
    "filters": [],
    "includes": {}
  }
}