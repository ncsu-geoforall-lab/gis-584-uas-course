---
subtitle: "UAS Image Classification"
title: "Assignment 6A"
assignment-due-date: 11/06/2024
author:
    - Corey White
# date: 11/4/24
format: html
toc-depth: 4
---

## Outline

<!-- - Visual Change
- Binary Change -->
- Feature Engineering
- Segmentation
- Image Classification
- Validation

## Data

Download imagery data from March and June flights during 2017.

<!-- - [Orthos June 2017]({{< var data.lake_wheeler_flight_Jun_2017_orthos >}}) -->
- [Orthos July 2024]({{< var data.lake_wheeler_flight_July_17_2024_orthophoto >}})
- [DSM July 2024]({{< var data.lake_wheeler_flight_July_17_2024_dsm >}})

## Workflow

Create a new mapset within your `Lake_Wheeler_NCspm` project and set your working directory.

Import the ortho imagery for the July 17, 2024 UAS flight. The orthophoto is save as a [*Cloud Optimized GeoTIFF (COG)*](http://cogeo.org/) which allows us to directory import the data using r.import with needing to download the data beforehand.

```bash
r.import input=https://storage.googleapis.com/gis-course-data/gis584/uas-flight-data/Lake%20Wheeler%20-%20NCSU/071724/odm_orthophoto.tif resample=nearest output=odm_071724_ortho
```

Let's set the compuational region to the ortho imagery.

```bash
g.region raster=odm_071724_ortho.1
```

:::{.callout-important}
**Task:** What is the spatial resolution and how many pixels are include in the compuational region?
:::

<!-- ### Find overlaping areas

```bash
  r.series input="ortho_2017_06_02,ortho_2017_06_02" output="series_count" method=count
``` -->

<!-- :::{.callout-important}
**Task:** Create a raster mask using raster algebra (`r.mapcalc`) to generate a raster where if both rasters overlap set the new raster to equal `1` else `null`.
::: -->

<!-- ### Visual Change Detection

Map Swipe Tool `File -> Map Swipe` select your top left raster map and bottom/right raster map and press `OK`. Use the slider to examine the differences between to two dates. -->

<!-- :::{.callout-important}
**Task:** Describe the difference you see between the two dates.
::: -->

<!-- ### Binary Change Detection -->

<!-- ### Image differencing

```bash
r.mapcalc expression=rgb_diff = ortho_2017_03_29@GIS_584_6a  -  ortho_2017_06_02@GIS_584_6a
r.colors -e map=rgb_diff@GIS_584_6a color=bcyr
``` -->

### Image Classification

Let's create an RGB color composite from our ortho bands.

```bash
r.composite -d red=odm_071724_ortho.1 green=odm_071724_ortho.2 blue=odm_071724_ortho.3 output=odm_071724_ortho.rgb
```

Let's create a raster mask for our analysis.

```bash
r.mapcalc expression="img_mask = if( odm_071724_ortho.rgb@GIS_584_6a, 1, null())"
r.mask raster=img_mask
```

### Spectral Feature Extraction

#### Spectral Indices

Calculate `VARI` index

```bash
r.mapcalc expression="vari_2024 = (odm_071724_ortho.2 - odm_071724_ortho.1) / (odm_071724_ortho.2 + odm_071724_ortho.1 - odm_071724_ortho.3)"
```

Let's look at the univariate statistics of our `vari_2024` raster.

```bash
r.univar vari_2024
```

:::{.callout-important}
**Task:** What is the range from the `vari_2024` univariate statistics?
:::

Now let's look at the metadata for each of our bands.

```bash
r.info odm_071724_ortho.1
r.info odm_071724_ortho.2
r.info odm_071724_ortho.3
```

Our original ortho bands were unsigned 8bit integers (a `CELL` data type in GRASS) ranging from 0-255 in value. However, when we calulate VARI the data is expected to be scaled from 0-1. To do this we must rescale our band data and cast our output data to Float32.

```bash
r.mapcalc expression="odm_071724_ortho.red = if(isnull(odm_071724_ortho.1), null(), float(odm_071724_ortho.1) / 255.0)"
r.mapcalc expression="odm_071724_ortho.green = if(isnull(odm_071724_ortho.2), null(), float(odm_071724_ortho.2) / 255.0)"
r.mapcalc expression="odm_071724_ortho.blue = if(isnull(odm_071724_ortho.3), null(), float(odm_071724_ortho.3) / 255.0)"
```

Now let's compute VARI for our dataset.

$$
VARI = \frac{(Green - Red)}{(Green + Red - Blue)}
$$

```bash
r.mapcalc expression="odm_071724_ortho.vari = (odm_071724_ortho.green - odm_071724_ortho.red) / (odm_071724_ortho.green + odm_071724_ortho.red - odm_071724_ortho.blue)"

# Use the same color palette as NDVI
r.colors map=odm_071724_ortho.vari color=ndvi
```

![VARI Example](../images/lake_wheeler_vari.png){width=45%}

#### Low Pass Filters

We will now compute a *smooth* layer to remove noise from our data with the [r.neighbors](https://grass.osgeo.org/grass84/manuals/r.neighbors.html) tool. To do this we will compute the mean value for each pixel using a 27x27 moving window.

```bash
r.neighbors input=odm_071724_ortho.red size=27 method=average output=odm_071724_ortho.red.27x27mean
```

![27x27 Moving Window Mean](../images/low_pass_filter_mean_moving_window_red.png){width=45%}

#### High Pass Filters

We will now create a layer to define our edges using the `zero-crossings` edge detection method implemented as [i.zc](https://grass.osgeo.org/grass-stable/manuals/i.zc.html) in GRASS GIS.

```bash
i.zc --overwrite input=odm_071724_ortho.vari output=odm_071724_ortho.vari.zc threshold=0.5
```

```bash
r.neighbors -c input=odm_071724_ortho.green size=7 method=variance output=odm_071724_ortho.green.7x7variance
```

![](../images/high_pass_filter_variance_moving_window_green.png){width=40%}
![](../images/high_pass_filter_variance_moving_window_green2.png){width=40%}

:::{.callout-important}
**Task:** Find a nice color scheme to display `odm_071724_ortho.green.7x7variance` and describe what information can be derived from the map.
:::
<!-- ```bash
r.neighbors -c input=odm_071724_ortho.green size=7 method=range output=odm_071724_ortho.green.range
``` -->

<!-- ```bash
r.neighbors -c input=odm_071724_dsm size=3 method=range output=odm_071724_dsm.3x3range
r.neighbors -c input=odm_071724_dsm size=3 method=stddev output=odm_071724_dsm.3x3stddev
r.neighbors -c input=odm_071724_dsm size=3 method=maximum output=odm_071724_dsm.3x3maximum
``` -->

#### Texture Features

Now we will calcuate the texture features Angular Second Moment (asm), Correlation (corr), and Contrast (con)
 for our green band using [r.texture](https://grass.osgeo.org/grass-stable/manuals/r.texture.html) which implements Haralick et al. (1973) Grey level co-occurrence matrix (GLCM).



```bash
r.texture odm_071724_ortho.green output=odm_071724_ortho.green_texture method="asm,contrast,corr" -s
```

![Angular Second Moment](../images/glcm_asm45.png){width=25%}
![Correlation](../images/glcm_cor45.png){width=25%}
![Contrast](../images/glcm_contr45.png){width=25%}

### Topographic Features Extraction

Let's now import our DSM data from the UAS flight.

```bash
r.import resample=bilinear extent=region input=https://storage.googleapis.com/gis-course-data/gis584/uas-flight-data/Lake%20Wheeler%20-%20NCSU/071724/dsm.tif output=odm_071724_dsm

# (Optional) Set the color table and create a relief map for viusalization
r.colors map=odm_071724_dsm color=elevation
r.relief input=odm_071724_dsm output=dsm_relief
```

Calculate slope and aspect using [r.slope.aspect](https://grass.osgeo.org/grass-stable/manuals/r.slope.aspect.html)

```bash
r.slope.aspect elevation=odm_071724_dsm slope=odm_071724_slope aspect=odm_071724_aspect pcurvature=odm_071724_pcurv tcurvature=odm_071724_tcurv
```

Now let's derive terrain forms form the the DSM using [r.geomorphon](https://grass.osgeo.org/grass-stable/manuals/r.geomorphon.html).

```bash
r.geomorphon elevation=odm_071724_dsm@GIS_584_6a forms=geomorphon search=3 skip=0 flat=1 dist=0
```

#### Create Imagery Group

GRASS GIS uses imagery groups ([i.group](https://grass.osgeo.org/grass84/manuals/i.group.html)) to manage imagery data.

Let's start by creating a new imagery group called `odm_071724_othro` with the subgroup `vis_bands` and add the red, green, and blue bands to the group/subgroup.

```bash
i.group group=rgb_group subgroup=vis_bands input=odm_071724_ortho.red,odm_071724_ortho.green,odm_071724_ortho.blue
```

You can now check that it worked by viewing which rasters are in the group (`odm_071724_ortho`) and subgroup (`vis_bands`).

```bash
i.group -l group=rgb_group subgroup=vis_bands
```

Let's now add some of our other derived features to the group (`odm_071724_ortho`) in a new subgroup called `analysis_bands`.

```bash
i.group group=odm_071724_ortho subgroup=analysis_bands input=odm_071724_ortho.vari,odm_071724_ortho.blue,odm_071724_ortho.red.27x27mean,odm_071724_dsm,odm_071724_slope,odm_071724_aspect,geomorphon,odm_071724_ortho.green.7x7variance
```

### Image Segmentation

Install [i.superpixels.slic](https://grass.osgeo.org/grass-stable/manuals/addons/i.superpixels.slic.html) GRASS Addon using the `g.extension` command.

```bash
g.extension i.superpixels.slic
```

Let's see if we can segment the fields.

```bash
i.superpixels.slic input=vis_bands output=superpixels num_pixels=2000
# r.to.vect input=superpixels output=superpixels type=area
```

Let's see if we can improve our segmentation to capture individual crops in the field.

```bash
i.superpixels.slic input=odm_071724_ortho output=superpixels_analysis step=7 compactness=0.8 minsize=15 memory=2000
```

We can now evaluate our segments statistics.

For example we can calculate the mean VARI value for each vector segment.

```bash
v.rast.stats map=superpixels_analy raster=odm_071724_ortho.vari column_prefix=vari method=average
```

Let's viusalize the result.

```bash
g.copy vector=superpixels_analy,superpixels_color
v.colors map=superpixels_color use=attr column=vari_average color=ndvi
d.vect map=superpixels_color width=2 icon=basic/point
d.vect map=superpixels fill_color=none
```

For our object based classification we will use [i.segment.stats](https://grass.osgeo.org/grass-stable/manuals/addons/i.segment.stats.html) to generate multiple statistics about our segments at once.

To do this we must first install [i.segment.stats](https://grass.osgeo.org/grass-stable/manuals/addons/i.segment.stats.html).

```bash
g.extension i.segment.stats
```

We will now compute the mean, standard deviation, and sum for each feature per segment. We also compute details about the geomertry of each segment such as the area, perimeter, and compactness.   

```bash
i.segment.stats map=superpixels rasters=odm_071724_ortho.red,odm_071724_ortho.green,odm_071724_ortho.blue,odm_071724_ortho.vari raster_statistics="mean,stddev,sum" vectormap=segment_stats processes=3
```
### Classification

For classification we are going to use a decision tree based model called a RandomForest. To do this we need to install the GRASS GIS addon [r.learn.ml](https://grass.osgeo.org/grass-stable/manuals/addons/r.learn.ml.html) which gives us access to models from the [scikit learn](https://scikit-learn.org/stable/) python library.

```bash
g.extension r.learn.ml
```

#### Sampling

One benifit of using the RandomForest classification model is that it utilizes a sampling strategy know as *bootstraping*. It does this by using out-of-bag samples (OOB) for each decision tree in the model. The OOB samples are used to calculate error, which works as a cross-validation mechanism and helps maintain diversity between decision trees.  

#### Train Model

[r.learn.train](https://grass.osgeo.org/grass-stable/manuals/addons/r.learn.train.html)

:::{.callout-warning}
Model training can take a long time to run. If you are having issues running on your local machine try resampling the data to 1m resolution.
:::

```bash
# train a random forest classification model using r.learn.train
r.learn.train group=rgb_group training_map=training_rf model_name=RandomForestClassifier n_estimators=500 save_model=rf_model.gz max_features=3
```

#### Run Model

[r.learn.predict](https://grass.osgeo.org/grass-stable/manuals/addons/r.learn.predict.html)

```bash
# perform prediction using r.learn.predict
r.learn.predict group=rgb_group load_model=rf_model.gz output=rf_basic_classification
```

Now we can check the categories and set the colors.

You can download the color table here [category_colors.txt](resources/category_colors.txt) or copy the rules here

```bash
1 255:0:0
2 0:128:0
3 255:255:0
4 139:105:20
5 127:127:127
6 128:0:128
7 144:238:144
8 165:42:42
9 255:165:0
nv white
```

```bash
# check raster categories - they are automatically applied to the classification output
r.category rf_classification
r.colors map=rf_basic_classification rules=category_colors.txt
```
![](../images/basic_classification.png)

#### Model Validation

We will now evaluate our model by looking at the models confussion matrix, overvall accuracy, and kappa coefficient using the GRASS addon [r.confusionmatrix](https://grass.osgeo.org/grass84/manuals/addons/r.confusionmatrix.html).

To begin we first need to install the addon.

```bash
g.extension r.confusionmatrix
```

Now run [r.confusionmatrix](https://grass.osgeo.org/grass84/manuals/addons/r.confusionmatrix.html)  

```bash
r.confusionmatrix classification=rf_basic_classification raster_reference=training_rf -m -d
```

The output for our classified model will look similar to below

**Overall accuracy**

Number of correct pixels / total number of pixels

`Overall Accuracy, 97.07`


**User Accuracy**

* From the perspective of the user of the classified map, how accurate is the map?
* For a given class, how many of the pixels on the map are actually what they say they are?
* Calculated as: Number correctly identified in a given map class / Number claimed to be in that map class

**Producer Accuracy**

* From the perspective of the maker of the classified map, how accurate is the map?
* For a given class in reference plots, how many of the pixels on the map are labeled correctly?
* Calculated as: Number correctly identified in ref. plots of a given class / Number actually in that reference class

**Commission Error**

Commission error refers to sites that are classified as to reference sites that were left out (or omitted) from the correct class in the classified map. Commission errors are calculated by reviewing the classified sites for incorrect classifications.

Commission Error = 100 % - User Accuracy

**Omission Error**

Omission error refers to reference sites that were left out (or omitted) from the correct class in the classified map. The real land cover type was left out or omitted from the classified map.

Omission Error = 100 % - Producer Accuracy

**Kappa coefficient**

It characterizes the degree of matching between reference data set and classification.

- **Kappa = 0**: indicates that obtained agreement equals chance agreement.
- **Kappa > 0**: indicates that obtained agreement is greater than chance agreement.
- **Kappa < 0**: indicates that obtained agreement is smaller than chance agreement.
- **Kappa = 1**: is perfect agreement.

`Kappa coefficient, 0.85`

:::{.callout-important}
**Task:** Interpret how well the model is performing. Which classes are performing well? Which need to be improved?
:::

|       Category         | buildings            | trees               | fields               | ground               | road               | car               | crop               |  	farm equipment               | bale               | User Accuracy   | Commission Error |
|----------------|---------------|-----------------|-----------------|----------------|---------------|-----------------|-----------------|---------------|-----------------|-----------------|
|   buildings     | 80379           | 63              | 22              | 6               | 70              | 27              | 1               | 34              | 24              | 99.69           | 0.31            |
|   trees         | 118             | 264667          | 25671           | 0               | 237             | 2               | 105             | 44              | 0               | 91.0            | 9.0             |
|                 fields        | 610             | 77160           | 6187667         | 16564           | 53766           | 268             | 762             | 2636            | 133             | 97.6            | 2.4             |
|                 ground        | 57              | 1               | 8871            | 45799           | 3132            | 1               | 2               | 151             | 0               | 78.94           | 21.06           |
|                 road          | 409             | 58              | 7070            | 1559            | 221794          | 1709            | 1               | 395             | 77              | 95.16           | 4.84            |
|                 car           | 75              | 2               | 38              | 0               | 2694            | 19216           | 0               | 18              | 1095            | 83.05           | 16.95           |
|                 crop          | 0               | 1               | 2               | 0               | 2               | 0               | 36              | 0               | 0               | 87.8            | 12.2            |
|                 farm equipment| 32              | 9               | 88              | 5               | 46              | 19              | 0               | 4311            | 1               | 95.57           | 4.43            |
|                 bale          | 20              | 0               | 2               | 0               | 5               | 2               | 0               | 1               | 719             | 95.99           | 4.01            |
|                 Producer Accuracy | 98.38       | 77.4            | 99.33           | 71.64           | 78.72           | 90.45           | 3.97            | 56.8            | 35.09                   |


