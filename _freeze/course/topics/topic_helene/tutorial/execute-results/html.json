{
  "hash": "4767e20b0543038918087726fc6da681",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Helene Photogrametery\ndescription: This tutorial demonstrates how download images from ArcGIS Server into GRASS GIS.\nauthor: Corey T. White\ndate: '2024-10-9'\nkeep-ipynb: false\ntoc: true\ntoc-depth: 4\ncategories: [geospatial, helene]\npage-layout: full\ndraft: false\n---\n\n\n# Download Flight Data\n\n## Set up environment\n\n::: {#b5d7dc98 .cell execution_count=1}\n``` {.python .cell-code}\nimport os\nimport sys\nimport subprocess\nfrom pathlib import Path\nfrom IPython.display import display\n\nimport requests\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\n```\n:::\n\n\n## Download images for processing\n\n::: {#be84d4ed .cell execution_count=2}\n``` {.python .cell-code}\ndef query_feature_service(flight_id):\n    \"\"\"Query FeatureService by flight_id\"\"\"\n    try:\n        rest_url = 'https://services.arcgis.com/XG15cJAlne2vxtgt/ArcGIS/rest/services/Image_Points_view/FeatureServer/3/query'\n\n        query = f\"project='CAP - H-TS Helene 2024' AND mission='24-1-5849' AND flight='{flight_id}'\"\n\n        params = {\n            'where': query,\n            'outFields': '*',\n            'f': 'json',\n            'returnGeometry': 'false'\n        }\n        response = requests.get(rest_url, params=params)\n        json_data = response.json()\n        url_list = list(map(lambda feat: feat.get('url'), json_data['features']))\n        return url_list\n    except requests.RequestException as e:\n        print(f\"Error fetching data from FeatureService: {e}\")\n\n# Function to download an image from a URL\ndef download_image(url, save_path, session):\n    \"\"\"Download and save image from a url\"\"\"\n    try:\n        response = session.get(url)\n        response.raise_for_status()  # Check for HTTP errors\n        with open(save_path, 'wb') as file:\n            file.write(response.content)\n        print(f\"Downloaded {url} to {save_path}\")\n    except requests.RequestException as e:\n        print(f\"Failed to download {url}: {e}\")\n\n# Main function to set up the thread pool and download images\ndef run(image_urls, save_dir, num_threads=4):\n    \"\"\"Creates thread pool and download images from a list of urls\"\"\"\n    if not os.path.exists(save_dir):\n        os.makedirs(save_dir)\n\n    with ThreadPoolExecutor(max_workers=num_threads) as executor:\n        with requests.Session() as session:\n            futures = []\n            for url in image_urls:\n                filename = os.path.basename(url)\n                save_path = os.path.join(save_dir, filename)\n                futures.append(executor.submit(download_image, url, save_path, session))\n\n            for future in as_completed(futures):\n                future.result()  # This will raise \n```\n:::\n\n\n### Run the download command\n\nMake sure to set appropriate threads for your system.\n\n::: {#6975e2c7 .cell execution_count=3}\n``` {.python .cell-code}\nurl_list = query_feature_service(flight_id='A0046B')\n\nrun(urls=url_list, save_dir=\"imagery_data/nadir/{flight}\", num_threads=32)\n```\n:::\n\n\n### Run data in your favorite photogrametry software\n\n- WebODM\n- Agisoft Metashape\n\n",
    "supporting": [
      "tutorial_files"
    ],
    "filters": [],
    "includes": {}
  }
}